// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PriceListClient is the client API for PriceList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceListClient interface {
	Fetch(ctx context.Context, in *URL, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *Params, opts ...grpc.CallOption) (*ProductList, error)
}

type priceListClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceListClient(cc grpc.ClientConnInterface) PriceListClient {
	return &priceListClient{cc}
}

func (c *priceListClient) Fetch(ctx context.Context, in *URL, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service.PriceList/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceListClient) List(ctx context.Context, in *Params, opts ...grpc.CallOption) (*ProductList, error) {
	out := new(ProductList)
	err := c.cc.Invoke(ctx, "/service.PriceList/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceListServer is the server API for PriceList service.
// All implementations must embed UnimplementedPriceListServer
// for forward compatibility
type PriceListServer interface {
	Fetch(context.Context, *URL) (*Response, error)
	List(context.Context, *Params) (*ProductList, error)
	mustEmbedUnimplementedPriceListServer()
}

// UnimplementedPriceListServer must be embedded to have forward compatible implementations.
type UnimplementedPriceListServer struct {
}

func (UnimplementedPriceListServer) Fetch(context.Context, *URL) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedPriceListServer) List(context.Context, *Params) (*ProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPriceListServer) mustEmbedUnimplementedPriceListServer() {}

// UnsafePriceListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceListServer will
// result in compilation errors.
type UnsafePriceListServer interface {
	mustEmbedUnimplementedPriceListServer()
}

func RegisterPriceListServer(s grpc.ServiceRegistrar, srv PriceListServer) {
	s.RegisterService(&PriceList_ServiceDesc, srv)
}

func _PriceList_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(URL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceListServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.PriceList/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceListServer).Fetch(ctx, req.(*URL))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceList_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceListServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.PriceList/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceListServer).List(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

// PriceList_ServiceDesc is the grpc.ServiceDesc for PriceList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.PriceList",
	HandlerType: (*PriceListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _PriceList_Fetch_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PriceList_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/service/service.proto",
}
